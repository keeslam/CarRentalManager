# Coolify deployment configuration using Nixpacks
# Fixed Git clone issues + Node.js setup

[variables]
# Node version to use
NIXPACKS_NODE_VERSION = "18"

[phases.setup]
# Install necessary nix packages
nixPkgs = ["nodejs", "tar", "git", "curl"]
cmds = [
  # Fix Git HTTP/2 issues voor alle Git operations
  "git config --global http.version HTTP/1.1",
  "git config --global http.postBuffer 524288000",
  "git config --global http.maxRequestBuffer 100M",
  "apt-get update && apt-get install -y tar git"
]

[phases.install]
# Clone repo + install dependencies
cmds = [
  # Clean previous attempts
  "rm -rf /artifacts/app /artifacts/source.tar.gz || true",
  
  # Clone het repo direct in de build environment
  "mkdir -p /artifacts/app",
  "cd /artifacts/app && git clone https://github.com/keeslam/CarRentalManager.git .",
  
  # Fallback: als clone faalt, probeer download als zip
  "cd /artifacts/app && [ -d .git ] || (rm -rf * && wget -qO- https://github.com/keeslam/CarRentalManager/archive/refs/heads/main.zip | tar -xzf - --strip-components=1)",
  
  # Install Node dependencies
  "cd /artifacts/app && npm ci --only=production"
]

[phases.build]
cmds = [
  "cd /artifacts/app && npm run build"
]

[start]
cmd = "cd /artifacts/app && npm start"

# Debug info (optioneel, verwijder na succesvolle deployment)
[phases.install]
cmds = [
  # ... (bovenstaande commands)
  # Voeg debug toe om te zien wat er gebeurt
  "cd /artifacts/app && echo '=== DEBUG: Contents after clone ===' && ls -la",
  "cd /artifacts/app && echo '=== DEBUG: package.json exists? ===' && test -f package.json && echo 'YES' || echo 'NO'",
  "cd /artifacts/app && npm ci --only=production"
]
