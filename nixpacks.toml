# Minimale nixpacks.toml - laat Nixpacks de defaults doen (met debug voor structuur)

[variables]
NIXPACKS_NODE_VERSION = "18"

# Installatie: installeer dependencies voor root EN frontend map
[phases.install]
cmds = [
  "npm ci --omit=dev",                 # Root dependencies (backend)
  "echo '=== CHECKING FOR CLIENT DIRECTORY AFTER INSTALL ==='",
  "ls -la | grep client || echo 'No client/ directory found'",
  "cd client && npm ci --omit=dev 2>/dev/null || echo 'Client dir not found or install skipped - no frontend?'"  # Frontend dependencies (fallback zonder error)
]

# Build: debug structuur + bouw frontend + kopieer naar verwachte structuur
[phases.build]
cmds = [
  # Debug: Toon volledige project structuur (zoals op GitHub)
  "echo '=== PROJECT STRUCTURE (like GitHub tree/main) ==='",
  "pwd",
  "ls -la",  # Root files en mappen
  "find . -maxdepth 3 -type d | sort",  # Toon directories tot 3 levels diep
  "find . -name 'package.json' -type f | head -5",  # Alle package.json locaties
  "echo '=== END STRUCTURE DEBUG ==='",
  
  # Check of client map bestaat
  "if [ -d 'client' ]; then echo '✅ Client directory found - proceeding with build'; else echo '❌ NO CLIENT DIRECTORY! Possible alternatives: frontend/, src/, app/. Check GitHub tree/main'; fi",
  
  # Bouw frontend alleen als client bestaat (met logging)
  "if [ -d 'client' ]; then echo 'Building frontend in client/...'; cd client && npm run build && echo '✅ Frontend build completed' || echo '❌ Frontend build in client/ FAILED - check package.json scripts'; cd ..; else echo 'Skipping frontend build (no client/)'; fi",
  
  # Check build output (als build liep)
  "if [ -d 'client' ]; then echo 'Checking client build output...'; ls -la client/ | grep -E 'dist|build|out' || echo 'No dist/build/out found in client/'; fi",
  
  # Maak de verwachte map
  "echo 'Creating /dist/public structure...'",
  "mkdir -p dist/public",
  
  # Robuuste copy: alleen als source bestaat, geen force error
  "if [ -d 'client/dist' ]; then echo '✅ Copying from client/dist/...'; cp -r client/dist/* dist/public/ 2>/dev/null || echo 'Copy from dist/ failed but continuing'; ",
  "elif [ -d 'client/build' ]; then echo '✅ Copying from client/build/...'; cp -r client/build/* dist/public/ 2>/dev/null || echo 'Copy from build/ failed but continuing'; ",
  "elif [ -d 'client/out' ]; then echo '✅ Copying from client/out/...'; cp -r client/out/* dist/public/ 2>/dev/null || echo 'Copy from out/ failed but continuing'; ",
  "else echo '⚠️ No build output in client/ (dist, build, or out) - trying alternatives...'; fi",
  
  # Probeer alternatieve frontend mappen (als client/ niet werkt, bijv. frontend/ van GitHub)
  "if [ ! -d 'client' ] && [ -d 'frontend' ]; then echo 'Trying frontend/ as alternative...'; cd frontend && npm run build && cd .. && cp -r frontend/dist/* dist/public/ 2>/dev/null || cp -r frontend/build/* dist/public/ 2>/dev/null; fi",
  "if [ ! -d 'client' ] && [ -d 'src' ]; then echo 'Trying src/ as alternative...'; cd src && npm run build && cd .. && cp -r src/dist/* dist/public/ 2>/dev/null || cp -r src/build/* dist/public/ 2>/dev/null; fi",
  
  # Finale check (zonder force fail)
  "if [ -f 'dist/public/index.html' ]; then echo '✅ Frontend ready in dist/public - index.html found!'; ls -la dist/public/ | head -5; else echo '❌ Still no index.html in dist/public - frontend build issue. Check logs above.'; fi",
  
  # Backend build (optioneel, met fallback)
  "npm run build 2>/dev/null || echo 'No root npm run build script - skipping backend build'"
]

# Override alleen de start command
[start]
cmd = "npm start"
